HW6 Written

Part 1:
1. 
Enter the number of tokens: 
5
Enter the number of rounds: 
1
Expected Tokens: 4.888888888888889
Enter the number of tokens: 
10
Enter the number of rounds: 
1
Expected Tokens: 9.88888888888889
There is a commonality between the expected number of tokens after one round, regardless of the starting number of tokens. 
That would be that it is slightly less than the number of tokens by about 0.12.

2. 
Enter the number of tokens: 
5
Enter the number of rounds: 
5
Expected Tokens: 4.447872741282663
Enter the number of tokens: 
10
Enter the number of rounds: 
5
Expected Tokens: 9.444444444444443
There is a commonality between the expected number of tokens after five rounds, regardless of the starting number of tokens. 
That would be that it is slightly less than the number of tokens by about 0.56.

3. Based on my experiments, the number of tokens does effect the amount of work. Although not nearly as much as the number of 
rounds, it still impacts the range of tokens and requires more work.

4. Yes, there is a practical limit to how many round expectedTopDown can handle, and based on tests, 15-20 rounds would be the 
max.

Part 2:
1. It does return the same answer as before. This is tested by calling both methods on the same number of rounds and tokens.
An example is below.
Enter the number of tokens: 
5
Enter the number of rounds: 
5
ExpectedTopDown: 4.447872741282663
ExpectedBottomUp: 4.447872741282663

2. Yes, this method is much much faster. ExpectedBottomUp has a time complexity of O(R*T), where R is rounds and T is tokens,
while expectedTopDown has a time complexity of O(4^R). I was able to go up to 25000 rounds before there was a significant delay, 
but even then it was only a few seconds.

3. 
Enter the number of tokens: 
10
Enter the number of rounds: 
100
2.9561050335674395
Enter the number of tokens: 
100
Enter the number of rounds: 
100
88.88888888888857
Looking at these two tests and comparing how much they lost/gained, there is a clear difference. This makes sense, as in the
Evensies game, there is a higher probability of losing. This would make a more drastic difference if you started with a smaller
amount of tokens and played a large number of rounds compared to starting with a large number of tokens and playing a large
number of rounds. 

Part 3:
1. Yes, this method does return the same answer as the previous two. This can be tested by calling all three methods with the 
same number of tokens and rounds. An example is given below of the results.
Enter the number of tokens: 
5
Enter the number of rounds: 
5
ExpectedTopDown: 4.447872741282663
ExpectedBottomUp: 4.447872741282663
ExpectedCaching: 4.447872741282663

2. It is definitely fasted than expectedTopDown, and is able to handle much longer games almost instantly. It was able to 
handle 2500 rounds in only a few seconds. ExpectedCaching and expectedBottomUp have the same time complexity of O(R*T), but
it isn't as good as expectedBottomUp though, as it gets a stack overflow error as the number gets big enough and cannot 
handle as many rounds as expectedBottomUp due to its recursive nature. Using the StopWatch class given earlier in the
semester, I also compared the times between expectedBottomUp and expectedCaching. As expected, expectedBottomUp was faster
than expectedCaching. ExpectedBottomUp is the best option overall, as it is the fastest and can handle the largest games.



