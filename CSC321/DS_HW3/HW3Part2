For the ArrayList, O(1) is expected for the get method, so its time should be constant. For both LinkedList and ComboList,
O(N^2) is expected for the get method because the get is O(N) and it goes through another loop that is O(N), so its time 
should quadruple when the list doubles. ComboList does skip a node at a time though, so it should be a little faster than 
LinkedList.These predication are backed up by the data below. Note that the bigger the list gets for LinkedList and 
ComboList the times may more than quadruple. This is due to my computer and background operations occurring, not the 
algorithm not being O(N^2).

Insert the starting list size: 
1000
Doubling list size until: 
100000
ArrayList
1000: 0
2000: 0
4000: 0
8000: 0
16000: 1
32000: 1
64000: 1
LinkedList
1000: 1
2000: 4
4000: 14
8000: 49
16000: 175
32000: 746
64000: 3106
ComboList
1000: 2
2000: 3
4000: 5
8000: 19
16000: 88
32000: 559
64000: 2825

Insert the starting list size: 
5000
Doubling list size until: 
500000
ArrayList
5000: 1
10000: 1
20000: 1
40000: 0
80000: 1
160000: 2
320000: 4
LinkedList
5000: 23
10000: 74
20000: 282
40000: 1203
80000: 4922
160000: 25544
320000: 172788
ComboList
5000: 14
10000: 32
20000: 175
40000: 1021
80000: 4524
160000: 19505
320000: 234343

Insert the starting list size: 
2500
Doubling list size until: 
25000
ArrayList
2500: 1
5000: 0
10000: 1
20000: 1
LinkedList
2500: 7
5000: 20
10000: 63
20000: 278
ComboList
2500: 5
5000: 7
10000: 31
20000: 172

Insert the starting list size: 
2500
Doubling list size until: 
250000
ArrayList
2500: 1
5000: 0
10000: 0
20000: 1
40000: 0
80000: 0
160000: 1
LinkedList
2500: 6
5000: 23
10000: 64
20000: 302
40000: 1218
80000: 4707
160000: 22413
ComboList
2500: 8
5000: 7
10000: 34
20000: 178
40000: 1015
80000: 4557
160000: 19024

